<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
<!-- 스프링시큐리티는 AOP(@Aspect,@ControllerAdvice)기능의 일종, 
	intercept라는 태그를 사용하는 것이 핵심 -->
<!-- 시큐리티 영향을 받지않고, 아무나 직접 URL접근이 가능한 주소부터 나열
주로 정적인(static, resources)파일들은 보안해제시킴(아래) -->
<security:http pattern="/**/*.js" security="none" />
<security:http pattern="/**/*.css" security="none" />
<security:http pattern="/**/img/*" security="none" />
<!-- 스프링시큐리티 기본설정 시작 use-expression=true는 아래 설정내용 중 자바의EL을 사용하겠다라는 것.-->
<security:http auto-config="true" use-expressions="true">
	<security:session-management invalid-session-url="/">
	<security:concurrency-control max-sessions="3" error-if-maximum-exceeded="false" />
	</security:session-management>
	<!-- 여기서부터 intercept(가로채기AOP)사용해서 로그인과 access-권한체크를 하게됨 -->
	<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
	<security:intercept-url pattern="/**/*_insert" access="hasRole('ROLE_USER','ROLE_ADMIN')" />
	<security:intercept-url pattern="/**/*_insert_form" access="hasRole('ROLE_USER','ROLE_ADMIN')" />
	<security:intercept-url pattern="/**/*_update" access="hasRole('ROLE_USER','ROLE_ADMIN')" />
	<security:intercept-url pattern="/**/*_update_form" access="hasRole('ROLE_USER','ROLE_ADMIN')" />
	<security:intercept-url pattern="/**/*_delete" access="hasRole('ROLE_USER','ROLE_ADMIN')" />
	<security:intercept-url pattern="/**/member/**" access="hasRole('ROLE_USER','ROLE_ADMIN')" />
</security:http>
</beans>
